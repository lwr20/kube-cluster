#cloud-config
---
write_files:
  # Need to configure localhost since GCE doesn't do it for us.
  # Specifically, the leader election container requires localhost
  # to resolve to 127.0.0.1
  - path: /etc/hosts 
    owner: root
    permissions: 0644
    content: |
      127.0.0.1    localhost

  # Network config file for the Calico CNI plugin.
  - path: /etc/cni/net.d/10-calico.conf 
    owner: root
    permissions: 0755
    content: |
      {
          "name": "calico-k8s-network",
          "type": "calico",
          "etcd_endpoints": "http://kube-scale-etcd-01:2379,http://kube-scale-etcd-02:2379,http://kube-scale-etcd-03:2379",
          "log_level": "info",
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "default-deny-inbound",
              "k8s_api_root": "http://127.0.0.1:8080/api/v1/"
          }
      }

  # NetworkPolicy ThirdPartyResource file.
  - path: /home/core/networkpolicy.yaml
    owner: root
    permissions: 0755
    content: |
      kind: ThirdPartyResource
      apiVersion: extensions/v1beta1
      metadata:
        name: network-policy.net.alpha.kubernetes.io
      description: "Specification for a network isolation policy"
      versions:
        - name: v1alpha1

  # Manifest which starts the Calico policy agent on the master.
  - path: /etc/kubernetes/manifests/calico-policy.yaml
    owner: root
    permissions: 0755
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: calico-policy-agent
        namespace: calico-system
        labels:
          version: latest
          projectcalico.org/app: "policy-agent"
      spec:
        hostNetwork: true
        containers:
          # The Calico policy agent.
          - name: k8s-policy-agent
            image: calico/k8s-policy-agent:latest
            imagePullPolicy: IfNotPresent 
            env:
              # Modify ETCD_ENDPOINTS to match your etcd cluster.
              - name: ETCD_ENDPOINTS
                value: "http://kube-scale-etcd-01.c.unique-caldron-775.internal:2379,http://kube-scale-etcd-02.c.unique-caldron-775.internal:2379,http://kube-scale-etcd-03.c.unique-caldron-775.internal:2379"
              - name: K8S_API
                value: "http://127.0.0.1:8080"
              - name: LEADER_ELECTION 
                value: "true"
          # Leader election container used by the policy agent.
          - name: leader-elector
            image: gcr.io/google_containers/leader-elector:0.4
            imagePullPolicy: IfNotPresent
            args:
              - "--election=calico-policy-election"
              - "--http=127.0.0.1:4040"
            ports:
              - containerPort: 4040
                protocol: TCP

  # NetworkPolicy object used by the test to allow traffic from
  # the "getter" pods to the nginx service.
  - path: /home/core/nginx-policy.yaml
    owner: root
    permissions: 0755
    content: |
      kind: NetworkPolicy
      apiVersion: net.alpha.kubernetes.io/v1alpha1
      metadata:
        namespace: default
        name: nginx-service 
      spec:
        podSelector:
          k8s-app: nginx-server 
        ingress:
          - from:
              - pods:
                  role: getter 
            ports:
              - protocol: TCP
                port: 80

coreos:
  update:
    reboot-strategy: off
  etcd2:
    name: "etcdserver"
    initial-cluster: etcdserver=http://$private_ipv4:2380
    advertise-client-urls: http://$private_ipv4:2379
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://0.0.0.0:2380
    data-dir: /mnt/ssd/etcd2
  fleet:
    metadata: "role=master"
    etcd_servers: "http://$private_ipv4:2379"
  units:
    - name: "docker.service"
      drop-ins:
        - name: "50-insecure-registry.conf"
          content: |
            [Service]
            Environment=DOCKER_OPTS='--insecure-registry="kube-scale-master:5000"'
    - name: "etcd2.service"
      command: "start"
      drop-ins:
        - name: 10-procs.conf
          content: |
            [Service]
            Environment=GOMAXPROCS=16
            LimitNOFILE=40000
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/sdb
        ExecStart=/usr/sbin/mkfs.btrfs -f /dev/sdb
    - name: mnt-ssd.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /mnt/ssd
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        Before=fix-permission.service
        [Mount]
        What=/dev/sdb
        Where=/mnt/ssd
        DirectoryMode=0777
        Type=btrfs
    - name: fix-permission.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        Before=etcd2.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/chmod 777 /mnt/ssd
    - name: fleet.service
      command: start
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=etcd2.service
        After=etcd2.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v1.2.0/bin/linux/amd64/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
        ExecStart=/opt/bin/kube-apiserver \
        --allow-privileged=true \
        --etcd-servers=http://$private_ipv4:2379 \
        --runtime-config=extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true \
        --insecure-bind-address=0.0.0.0 \
        --service-cluster-ip-range=10.100.0.0/24 \
        --logtostderr=true
        Restart=always
        RestartSec=10
        LimitNOFILE=40000
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v1.2.0/bin/linux/amd64/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
        ExecStart=/opt/bin/kube-controller-manager \
        --master=$private_ipv4:8080 \
        --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v1.2.0/bin/linux/amd64/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
        ExecStart=/opt/bin/kube-scheduler --master=$private_ipv4:8080
        Restart=always
        RestartSec=10
    - name: calico-node.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=calicoctl node
        After=docker.service
        Requires=docker.service
        
        [Service]
        User=root
        Environment=ETCD_ENDPOINTS=http://kube-scale-etcd-01:2379,http://kube-scale-etcd-02:2379,http://kube-scale-etcd-03:2379
        PermissionsStartOnly=true
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://github.com/projectcalico/calico-containers/releases/download/v0.18.0/calicoctl
        ExecStartPre=/usr/bin/chmod +x /opt/bin/calicoctl
        ExecStartPre=/opt/bin/calicoctl pool add 192.168.0.0/16 --ipip --nat-outgoing
        ExecStart=/opt/bin/calicoctl node --detach=false
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kubelet.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        After=docker.service
        Requires=docker.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v1.2.0/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        ExecStartPre=/usr/bin/wget -N -P /opt/cni/bin https://circle-artifacts.com/gh/projectcalico/calico-cni/154/artifacts/0/home/ubuntu/calico-cni/dist/calico  
        ExecStartPre=/usr/bin/chmod +x /opt/cni/bin/calico
        ExecStart=/opt/bin/kubelet \
        --port=10250 \
        --address=0.0.0.0 \
        --register-node=true \
        --register-schedulable=false \
        --allow-privileged=true \
        --cluster-dns=10.100.0.10 \
        --cluster-domain=cluster.local \
        --api-servers=http://$private_ipv4:8080 \
        --config=/etc/kubernetes/manifests \
        --network-plugin-dir=/etc/cni/net.d \
        --network-plugin=cni \
        --hostname-override=127.0.0.1 \
        --logtostderr=true
        Restart=always
        RestartSec=10

        [Install]
        WantedBy=multi-user.target

    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kubelet.service
        After=kubelet.service
        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin  https://storage.googleapis.com/kubernetes-release/release/v1.2.0/bin/linux/amd64/kube-proxy
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
        ExecStart=/opt/bin/kube-proxy \
        --master=http://$private_ipv4:8080 \
        --proxy-mode=iptables \
        --logtostderr=true
        Restart=always
        RestartSec=10

    # Installs the NetworkPolicy object used in the scale test.
    - name: install-policy.service 
      command: start
      content: |
        [Unit]
        Description=Install Policy
        Requires=docker.service kube-apiserver.service
        After=docker.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v1.2.0/bin/linux/amd64/kubectl
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubectl
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://github.com/projectcalico/k8s-policy/releases/download/v0.1.3/policy
        ExecStartPre=/usr/bin/chmod +x /opt/bin/policy
        ExecStartPre=-/opt/bin/kubectl create -f /home/core/networkpolicy.yaml
        ExecStartPre=/usr/bin/sleep 5
        ExecStart=-/opt/bin/policy create -f /home/core/nginx-policy.yaml

        [Install]
        WantedBy=multi-user.target

    # Downloads binaries and serves them to other nodes in the cluster.  This is done
    # to minimize GET requests to GitHub, etc.
    - name: nginx.service
      command: start
      content: |
        [Unit]
        Description=Nginx
        Requires=docker.service
        After=docker.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/wget -nc -P /tmp https://github.com/projectcalico/calico-containers/releases/download/v0.18.0/calicoctl
        ExecStartPre=/usr/bin/wget -nc -P /tmp https://circle-artifacts.com/gh/projectcalico/calico-cni/154/artifacts/0/home/ubuntu/calico-cni/dist/calico  
        ExecStartPre=-/usr/bin/docker kill mynginx
        ExecStartPre=-/usr/bin/docker rm mynginx
        ExecStartPre=/usr/bin/docker pull nginx
        ExecStart=/usr/bin/docker run --name mynginx -p 80:80 -v /tmp:/usr/share/nginx/html:ro -d nginx

        [Install]
        WantedBy=multi-user.target

    # Local Docker registry - nodes pull the calico/node image from here.
    - name: registry.service
      command: start
      content: |
        [Unit]
        Description=registry
        Requires=docker.service
        After=docker.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill registry
        ExecStartPre=-/usr/bin/docker rm registry
        ExecStartPre=-/usr/bin/docker pull registry:2
        ExecStartPre=-/usr/bin/docker pull lwr20/calico-node
        ExecStartPre=-/usr/bin/docker tag lwr20/calico-node kube-scale-master:5000/calico-node
        ExecStart=/usr/bin/docker run -p 5000:5000 --name registry registry:2
        ExecStartPost=/bin/sleep 5
        ExecStartPost=/usr/bin/docker push kube-scale-master:5000/calico-node

        [Install]
        WantedBy=multi-user.target
